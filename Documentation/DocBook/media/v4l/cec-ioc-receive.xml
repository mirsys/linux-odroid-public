<refentry id="cec-ioc-receive">
  <refmeta>
    <refentrytitle>ioctl CEC_RECEIVE, CEC_TRANSMIT</refentrytitle>
    &manvol;
  </refmeta>

  <refnamediv>
    <refname>CEC_RECEIVE</refname>
    <refname>CEC_TRANSMIT</refname>
    <refpurpose>Receive or transmit a CEC message</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcprototype>
	<funcdef>int <function>ioctl</function></funcdef>
	<paramdef>int <parameter>fd</parameter></paramdef>
	<paramdef>int <parameter>request</parameter></paramdef>
	<paramdef>struct cec_msg *<parameter>argp</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Arguments</title>

    <variablelist>
      <varlistentry>
	<term><parameter>fd</parameter></term>
	<listitem>
	  <para>File descriptor returned by
	  <link linkend='cec-func-open'><function>open()</function></link>.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter>request</parameter></term>
	<listitem>
	  <para>CEC_RECEIVE, CEC_TRANSMIT</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter>argp</parameter></term>
	<listitem>
	  <para></para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Description</title>

    <para>To receive a CEC message the application has to fill in the
    <structname>cec_msg</structname> structure and pass it to the
    <constant>CEC_RECEIVE</constant> ioctl. <constant>CEC_RECEIVE</constant> is
    only available if <constant>CEC_CAP_RECEIVE</constant> is set. If the
    file descriptor is in non-blocking mode and there are no received
    messages pending, then it will return -1 and set errno to the &EAGAIN;.
    If the file descriptor is in blocking mode and <structfield>timeout</structfield>
    is non-zero and no message arrived within <structfield>timeout</structfield>
    milliseconds, then it will return -1 and set errno to the &ETIMEDOUT;.</para>

    <para>To send a CEC message the application has to fill in the
    <structname>cec_msg</structname> structure and pass it to the
    <constant>CEC_TRANSMIT</constant> ioctl. <constant>CEC_TRANSMIT</constant> is
    only available if <constant>CEC_CAP_TRANSMIT</constant> is set.
    If there is no more room in the transmit queue, then it will return
    -1 and set errno to the &EBUSY;.</para>

    <table pgwide="1" frame="none" id="cec-msg">
      <title>struct <structname>cec_msg</structname></title>
      <tgroup cols="3">
	&cs-str;
	<tbody valign="top">
	  <row>
	    <entry>__u64</entry>
	    <entry><structfield>ts</structfield></entry>
	    <entry>Timestamp of when the message was transmitted in ns in the case
	    of <constant>CEC_TRANSMIT</constant> with <structfield>reply</structfield>
	    set to 0, or the timestamp of the received message in all other cases.</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>len</structfield></entry>
	    <entry>The length of the message. For <constant>CEC_TRANSMIT</constant> this
	    is filled in by the application. The driver will fill this in for
	    <constant>CEC_RECEIVE</constant> and for <constant>CEC_TRANSMIT</constant>
	    it will be filled in with the length of the reply message if
	    <structfield>reply</structfield> was set.</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>status</structfield></entry>
	    <entry>The status of the message. When used with <constant>CEC_RECEIVE</constant>
	    this is always set to <constant>CEC_RX_STATUS_READY</constant>. When
	    used with <constant>CEC_TRANSMIT</constant> see <xref linkend="cec-tx-status" />
	    for the possible status values.</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>timeout</structfield></entry>
	    <entry>The timeout in milliseconds. This is the time we wait for a message to
	    be received. If it is set to 0, then we wait indefinitely.
	    It is ignored by <constant>CEC_TRANSMIT</constant>.</entry>
	  </row>
	  <row>
	    <entry>__u8</entry>
	    <entry><structfield>msg</structfield>[16]</entry>
	    <entry>The message payload. For <constant>CEC_TRANSMIT</constant> this
	    is filled in by the application. The driver will fill this in for
	    <constant>CEC_RECEIVE</constant> and for <constant>CEC_TRANSMIT</constant>
	    it will be filled in with the payload of the reply message if
	    <structfield>reply</structfield> was set.</entry>
	  </row>
	  <row>
	    <entry>__u8</entry>
	    <entry><structfield>reply</structfield></entry>
	    <entry>Wait until this message is replied. If <structfield>reply</structfield>
	    is 0, then don't wait for a reply but return after transmitting the
	    message. If there was an error as indicated by a non-zero <structfield>status</structfield>
	    field, then <structfield>reply</structfield> is set to 0 by the driver.
	    Ignored by <constant>CEC_RECEIVE</constant>.</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>sequence</structfield></entry>
	    <entry>The sequence number is automatically assigned by the CEC
	    framework for all transmitted messages. It can be later used by the
	    framework to generate an event if a reply for a message was
	    requested and the message was transmitted in a non-blocking mode.
	    </entry>
	  </row>
	  <row>
	    <entry>__u8</entry>
	    <entry><structfield>reserved</structfield>[35]</entry>
	    <entry>Reserved for future extensions. Drivers and applications must
	    set this array to zero.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table pgwide="1" frame="none" id="cec-tx-status">
      <title>CEC Transmit Status</title>
      <tgroup cols="3">
	&cs-def;
	<tbody valign="top">
	  <row>
	    <entry><constant>CEC_TX_STATUS_OK</constant></entry>
	    <entry>0x00</entry>
	    <entry>The message was transmitted successfully.</entry>
	  </row>
	  <row>
	    <entry><constant>CEC_TX_STATUS_ARB_LOST</constant></entry>
	    <entry>0x01</entry>
	    <entry>CEC line arbitration was lost.</entry>
	  </row>
	  <row>
	    <entry><constant>CEC_TX_STATUS_RETRY_TIMEOUT</constant></entry>
	    <entry>0x02</entry>
	    <entry>The transmit timed out. The timeout period is 200 ms for a polling
	    message and 1 second for other messages as specified by the CEC protocol.</entry>
	  </row>
	  <row>
	    <entry><constant>CEC_TX_STATUS_FEATURE_ABORT</constant></entry>
	    <entry>0x04</entry>
	    <entry>The message was transmitted successfully but the reply was
	    <constant>CEC_MSG_FEATURE_ABORT</constant>.</entry>
	  </row>
	  <row>
	    <entry><constant>CEC_TX_STATUS_REPLY_TIMEOUT</constant></entry>
	    <entry>0x08</entry>
	    <entry>The message was transmitted successfully but the reply was never
	    received within the 1 second timeout period (this timeout value is
	    specified by the CEC protocol).</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>

  <refsect1>
    &return-value;
  </refsect1>
</refentry>
